Example code can be found in the `examples folder <https://github.com/Rapptz/discord.py/tree/master/examples>`_
in the repository.:orphan:

.. currentmodule:: discord
.. _faq:

Perguntas Frequentes
===========================

Esta √© uma lista de Perguntas Frequentes sobre o uso do ``discord.py`` e seus m√≥dulos de extens√£o. Sinta-se √† vontade para sugerir uma
nova pergunta ou enviar uma via pull request.

.. contents:: Perguntas
    :local:

Corrotinas
------------

Perguntas relacionadas a corrotinas e asyncio pertencem a esta se√ß√£o.

O que √© uma corrotina?
~~~~~~~~~~~~~~~~~~~~~~

Uma |coroutine_link|_ √© uma fun√ß√£o que deve ser chamada com ``await`` ou ``yield from``. Quando o Python encontra um ``await``, ele
interrompe a execu√ß√£o da fun√ß√£o naquele ponto e trabalha em outras tarefas at√© voltar e finalizar o trabalho. 
Isso permite que seu programa execute m√∫ltiplas tarefas ao mesmo tempo sem usar threads ou multiprocessing complicado.

**Se voc√™ esquecer de usar await em uma corrotina, ela n√£o ser√° executada. Nunca se esque√ßa de await em uma corrotina.**

Onde posso usar ``await``\?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Voc√™ s√≥ pode usar ``await`` dentro de fun√ß√µes ``async def`` e em nenhum outro lugar.

O que significa "bloqueio"?
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Em programa√ß√£o ass√≠ncrona, uma chamada bloqueante √© basicamente todas as partes da fun√ß√£o que n√£o s√£o ``await``. 
N√£o se preocupe, pois nem todas as formas de bloqueio s√£o ruins! Usar chamadas bloqueantes √© inevit√°vel, mas voc√™ deve garantir 
que n√£o bloqueie fun√ß√µes excessivamente. Lembre-se, se voc√™ bloquear por muito tempo, seu bot ir√° travar, pois a execu√ß√£o 
da fun√ß√£o n√£o parou naquele ponto para fazer outras tarefas.

Se o logging estiver habilitado, esta biblioteca tentar√° avisar quando houver bloqueio com a mensagem:
``Heartbeat blocked for more than N seconds.``
Veja :ref:`logging_setup` para detalhes sobre como habilitar logging.

Uma fonte comum de bloqueio excessivo √© algo como :func:`time.sleep`. N√£o fa√ßa isso. Use :func:`asyncio.sleep` 
em vez disso. Similar ao exemplo: ::

    # ruim
    time.sleep(10)

    # bom
    await asyncio.sleep(10)

Outra fonte comum de bloqueio excessivo √© usar requisi√ß√µes HTTP com o famoso m√≥dulo :doc:`req:index`.
Enquanto :doc:`req:index` √© um m√≥dulo incr√≠vel para programa√ß√£o n√£o ass√≠ncrona, ele n√£o √© uma boa escolha para 
:mod:`asyncio` porque certas requisi√ß√µes podem bloquear o event loop por muito tempo. Em vez disso, use a biblioteca :doc:`aiohttp <aio:index>`, 
que j√° vem instalada junto com esta biblioteca.

Considere o seguinte exemplo: ::

    # ruim
    r = requests.get('http://aws.random.cat/meow')
    if r.status_code == 200:
        js = r.json()
        await channel.send(js['file'])

    # bom
    async with aiohttp.ClientSession() as session:
        async with session.get('http://aws.random.cat/meow') as r:
            if r.status == 200:
                js = await r.json()
                await channel.send(js['file'])

Geral
---------

Perguntas gerais sobre o uso da biblioteca pertencem a esta se√ß√£o.

Onde posso encontrar exemplos de uso?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

O c√≥digo de exemplo pode ser encontrado na `pasta de exemplos <https://github.com/Rapptz/discord.py/tree/master/examples>`_ 
no reposit√≥rio.

            data = io.BytesIO(await resp.read())
            await channel.send(file=discord.File(data, 'cool_image.png'))Como fa√ßo para definir o status "Jogando"?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

O argumento de palavra-chave ``activity`` pode ser passado no construtor da :class:`Client` ou em :meth:`Client.change_presence`, 
dado um objeto :class:`Activity`.

O construtor pode ser usado para atividades est√°ticas, enquanto :meth:`Client.change_presence` pode ser usado para atualizar 
a atividade em tempo de execu√ß√£o.

.. warning::

    √â altamente desaconselhado usar :meth:`Client.change_presence` ou chamadas de API em :func:`on_ready`, 
    pois este evento pode ser chamado v√°rias vezes durante a execu√ß√£o, n√£o apenas uma vez.

    H√° uma grande chance de desconex√£o se as presen√ßas forem alteradas logo ap√≥s conectar.

O tipo de status (jogando, ouvindo, transmitindo, assistindo) pode ser definido usando o enum :class:`ActivityType`.
Para otimiza√ß√£o de mem√≥ria, algumas atividades s√£o oferecidas em vers√µes simplificadas:

- :class:`Game`
- :class:`Streaming`

Juntando essas informa√ß√µes, voc√™ teria o seguinte: ::

    client = discord.Client(activity=discord.Game(name='meu jogo'))

    # ou, para assistir:
    activity = discord.Activity(name='minha atividade', type=discord.ActivityType.watching)
    client = discord.Client(activity=activity)

Como envio uma mensagem para um canal espec√≠fico?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Voc√™ deve buscar o canal diretamente e ent√£o chamar o m√©todo apropriado. Exemplo: ::

    channel = client.get_channel(12324234183172)
    await channel.send('ol√°')

Como envio uma DM?
~~~~~~~~~~~~~~~~~~

Obtenha o objeto :class:`User` ou :class:`Member` e chame :meth:`abc.Messageable.send`. Por exemplo: ::

    user = client.get_user(381870129706958858)
    await user.send('üëÄ')

Se voc√™ est√° respondendo a um evento, como :func:`on_message`, voc√™ j√° tem o objeto :class:`User` via :attr:`Message.author`: ::

    await message.author.send('üëã')

Como obtenho o ID de uma mensagem enviada?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:meth:`abc.Messageable.send` retorna a :class:`Message` que foi enviada.
O ID de uma mensagem pode ser acessado via :attr:`Message.id`: ::

    message = await channel.send('hmm‚Ä¶')
    message_id = message.id

Como fa√ßo upload de uma imagem?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Para enviar algo para o Discord, voc√™ deve usar o objeto :class:`File`.

Um :class:`File` aceita dois par√¢metros, o objeto tipo arquivo (ou caminho do arquivo) e o nome do arquivo
para enviar ao Discord durante o upload.

Se voc√™ quiser enviar uma imagem √© t√£o simples quanto: ::

    await channel.send(file=discord.File('meu_arquivo.png'))

Se voc√™ tiver um objeto tipo arquivo, pode fazer o seguinte: ::

    with open('meu_arquivo.png', 'rb') as fp:
        await channel.send(file=discord.File(fp, 'novo_nome.png'))

Para enviar m√∫ltiplos arquivos, voc√™ pode usar o argumento de palavra-chave ``files`` ao inv√©s de ``file``\: ::

    meus_arquivos = [
        discord.File('resultado.zip'),
        discord.File('grafico_teaser.png'),
    ]
    await channel.send(files=meus_arquivos)

Se voc√™ quiser enviar algo a partir de uma URL, ser√° necess√°rio fazer uma requisi√ß√£o HTTP usando :doc:`aiohttp <aio:index>`
e ent√£o passar uma inst√¢ncia :class:`io.BytesIO` para :class:`File`, assim:

.. code-block:: python3

    import io
    import aiohttp

    async with aiohttp.ClientSession() as session:
        async with session.get(minha_url) as resp:
            if resp.status != 200:
                return await channel.send('N√£o foi poss√≠vel baixar o arquivo...')
            data = io.BytesIO(await resp.read())
            await channel.send(file=discord.File(data, 'imagem_legenda.png'))


        # find a channel by name
        channel = discord.utils.get(guild.text_channels, name='cool-channel')Como fa√ßo para adicionar uma rea√ß√£o a uma mensagem?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Voc√™ usa o m√©todo :meth:`Message.add_reaction`.

Se voc√™ quiser usar emojis unicode, deve passar um ponto de c√≥digo unicode v√°lido em uma string. No seu c√≥digo, voc√™ pode escrever isso de algumas maneiras diferentes:

- ``'üëç'``
- ``'\U0001F44D'``
- ``'\N{THUMBS UP SIGN}'``

Exemplo r√°pido:

.. code-block:: python3

    emoji = '\N{THUMBS UP SIGN}'
    # ou '\U0001f44d' ou 'üëç'
    await message.add_reaction(emoji)

Caso queira usar emojis que v√™m de uma mensagem, voc√™ j√° obt√©m seus pontos de c√≥digo no conte√∫do sem precisar
fazer nada de especial. Voc√™ **n√£o pode** enviar abrevia√ß√µes do estilo ``':thumbsup:'``.

Para emojis personalizados, voc√™ deve passar uma inst√¢ncia de :class:`Emoji`. Voc√™ tamb√©m pode passar uma string ``'<:nome:id>'``, mas se voc√™
pode usar esse emoji, deve conseguir usar :meth:`Client.get_emoji` para obter um emoji via ID ou usar :func:`utils.find`/
:func:`utils.get` nas cole√ß√µes :attr:`Client.emojis` ou :attr:`Guild.emojis`.

O nome e o ID de um emoji personalizado podem ser encontrados com o cliente prefixando ``:custom_emoji:`` com uma barra invertida.
Por exemplo, enviar a mensagem ``\:python3:`` com o cliente resultar√° em ``<:python3:232720527448342530>``.

Exemplo r√°pido:

.. code-block:: python3

    # se voc√™ j√° tem o ID
    emoji = client.get_emoji(310177266011340803)
    await message.add_reaction(emoji)

    # sem ID, fa√ßa uma busca
    emoji = discord.utils.get(guild.emojis, name='LUL')
    if emoji:
        await message.add_reaction(emoji)

    # se voc√™ tem o nome e ID de um emoji personalizado:
    emoji = '<:python3:232720527448342530>'
    await message.add_reaction(emoji)

Como passar uma coroutine para a fun√ß√£o "after" do player?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

O player de m√∫sica da biblioteca roda em uma thread separada, portanto n√£o executa dentro de uma coroutine.
Isso n√£o significa que n√£o seja poss√≠vel chamar uma coroutine no par√¢metro ``after``. Para isso, voc√™ deve passar uma fun√ß√£o cham√°vel
que encapsule alguns aspectos.

O primeiro cuidado que voc√™ deve ter √© que chamar uma coroutine n√£o √© uma opera√ß√£o segura para threads. Como estamos
tecnicamente em outra thread, devemos ter cautela ao chamar opera√ß√µes seguras para threads para evitar bugs. Felizmente,
:mod:`asyncio` possui a fun√ß√£o :func:`asyncio.run_coroutine_threadsafe`, que permite chamar
uma coroutine de outra thread.

No entanto, essa fun√ß√£o retorna um :class:`~concurrent.futures.Future` e, para realmente cham√°-la, precisamos obter seu resultado. 
Juntando tudo isso, podemos fazer o seguinte:

.. code-block:: python3

    def minha_after(error):
        coro = some_channel.send('A m√∫sica terminou!')
        fut = asyncio.run_coroutine_threadsafe(coro, client.loop)
        try:
            fut.result()
        except:
            # ocorreu um erro ao enviar a mensagem
            pass

    voice.play(discord.FFmpegPCMAudio(url), after=minha_after)

Como executar algo em segundo plano?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`Veja o exemplo background_task.py. <https://github.com/Rapptz/discord.py/blob/master/examples/background_task.py>`_

Como obter um modelo espec√≠fico?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Existem v√°rias maneiras de fazer isso. Se voc√™ tiver o ID de um modelo espec√≠fico, pode usar
uma das seguintes fun√ß√µes:

- :meth:`Client.get_channel`
- :meth:`Client.get_guild`
- :meth:`Client.get_user`
- :meth:`Client.get_emoji`
- :meth:`Guild.get_member`
- :meth:`Guild.get_channel`
- :meth:`Guild.get_role`

As seguintes usam uma requisi√ß√£o HTTP:

- :meth:`abc.Messageable.fetch_message`
- :meth:`Client.fetch_user`
- :meth:`Client.fetch_guilds`
- :meth:`Client.fetch_guild`
- :meth:`Guild.fetch_emoji`
- :meth:`Guild.fetch_emojis`
- :meth:`Guild.fetch_member`

Se as fun√ß√µes acima n√£o ajudarem, ent√£o o uso de :func:`utils.find` ou :func:`utils.get` pode ser √∫til para encontrar
modelos espec√≠ficos.

Exemplo r√°pido:

.. code-block:: python3

    # encontrar uma guilda pelo nome
    guild = discord.utils.get(client.guilds, name='Meu Servidor')

    # certifique-se de verificar se foi encontrada
    if guild is not None:
        # encontrar um canal pelo nome
        channel = discord.utils.get(guild.text_channels, name='canal-bacana')

    async def length(ctx):
        await ctx.send(f'Your message is {len(ctx.message.content)} characters long.')Como fa√ßo uma requisi√ß√£o web?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Para fazer uma requisi√ß√£o, voc√™ deve usar uma biblioteca n√£o bloqueante.
Esta biblioteca j√° usa e requer uma biblioteca de terceiros para requisi√ß√µes, :doc:`aiohttp <aio:index>`.

Exemplo r√°pido:

.. code-block:: python3

    async with aiohttp.ClientSession() as session:
        async with session.get('http://aws.random.cat/meow') as r:
            if r.status == 200:
                js = await r.json()

Veja a `documenta√ß√£o completa do aiohttp <http://aiohttp.readthedocs.io/en/stable/>`_ para mais informa√ß√µes.

.. _local_image:

Como usar um arquivo de imagem local em um embed?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

O Discord trata de forma especial o upload de uma imagem como anexo e seu uso dentro de um embed, de modo que n√£o
seja exibida separadamente, mas sim na miniatura, imagem, rodap√© ou √≠cone de autor do embed.

Para isso, fa√ßa o upload da imagem normalmente com :meth:`abc.Messageable.send`,
e defina o URL da imagem do embed como ``attachment://image.png``,
onde ``image.png`` √© o nome do arquivo que voc√™ enviar√°.

Exemplo r√°pido:

.. code-block:: python3

    file = discord.File("path/to/my/image.png", filename="image.png")
    embed = discord.Embed()
    embed.set_image(url="attachment://image.png")
    await channel.send(file=file, embed=embed)

Existe um evento para entradas do registro de auditoria sendo criadas?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Este evento agora est√° dispon√≠vel na biblioteca e no Discord a partir da vers√£o 2.2. Ele pode ser encontrado em :func:`on_audit_log_entry_create`.

Extens√£o de Comandos
-------------------

Perguntas sobre ``discord.ext.commands`` pertencem a esta se√ß√£o.

Por que ``on_message`` faz meus comandos pararem de funcionar?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sobrescrever o ``on_message`` padr√£o impede que quaisquer comandos adicionais sejam executados. Para corrigir isso, adicione uma
linha ``bot.process_commands(message)`` ao final do seu ``on_message``. Por exemplo: ::

    @bot.event
    async def on_message(message):
        # fa√ßa algo extra aqui

        await bot.process_commands(message)

Alternativamente, voc√™ pode colocar sua l√≥gica do ``on_message`` em um **listener**. Nesse caso, n√£o
chame manualmente ``bot.process_commands()``. Isso tamb√©m permite executar v√°rias tarefas de forma ass√≠ncrona em resposta
a uma mensagem. Exemplo::

    @bot.listen('on_message')
    async def qualquer_nome_que_quiser(message):
        # fa√ßa algo aqui
        # n√£o processe comandos aqui

Por que meus argumentos precisam de aspas?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Em um comando simples definido como:

.. code-block:: python3

    @bot.command()
    async def echo(ctx, message: str):
        await ctx.send(message)

Cham√°-lo via ``?echo a b c`` s√≥ pegar√° o primeiro argumento e ignorar√° os demais. Para corrigir isso, voc√™ deve ou chamar
via ``?echo "a b c"`` ou alterar a assinatura para ter o comportamento "consume rest". Exemplo:

.. code-block:: python3

    @bot.command()
    async def echo(ctx, *, message: str):
        await ctx.send(message)

Isso permitir√° usar ``?echo a b c`` sem precisar das aspas.

Como obtenho a ``message`` original?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

O :class:`~ext.commands.Context` cont√©m um atributo, :attr:`~.Context.message`, para obter a mensagem original.

Exemplo:

.. code-block:: python3

    @bot.command()
    async def length(ctx):
        await ctx.send(f'Sua mensagem tem {len(ctx.message.content)} caracteres.')

        tree.copy_global_to(guild=discord.Object(123456789012345678))
Como fa√ßo um subcomando?
~~~~~~~~~~~~~~~~~~~~~~~~

Use o decorador :func:`~ext.commands.group`. Isso transformar√° a fun√ß√£o de callback em um :class:`~ext.commands.Group`, permitindo adicionar comandos ao grupo que funcionar√£o como "subcomandos". Esses grupos podem ser aninhados arbitrariamente tamb√©m.

Exemplo:

.. code-block:: python3

    @bot.group()
    async def git(ctx):
        if ctx.invoked_subcommand is None:
            await ctx.send('Comando git inv√°lido...')

    @git.command()
    async def push(ctx, remote: str, branch: str):
        await ctx.send(f'Fazendo push para {remote} {branch}')

Isso poderia ser usado como ``?git push origin master``.

Views e Modals
-----------------

Perguntas sobre :class:`discord.ui.View`, :class:`discord.ui.Modal` e seus componentes, como bot√µes, menus de sele√ß√£o, etc.

Como posso desativar todos os itens ap√≥s o tempo esgotar?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Isso requer tr√™s passos:

1. Anexar uma mensagem ao :class:`~discord.ui.View` usando o tipo de retorno de :meth:`~abc.Messageable.send` ou recuperando-a via :attr:`InteractionCallbackResponse.resource`.
2. Dentro de :meth:`~ui.View.on_timeout`, percorra todos os itens da view e marque-os como desativados.
3. Edite a mensagem recuperada no passo 1 com a view modificada.

Juntando tudo, podemos fazer isso em um comando de texto:

.. code-block:: python3

    class MyView(discord.ui.View):
        async def on_timeout(self) -> None:
            # Passo 2
            for item in self.children:
                item.disabled = True

            # Passo 3
            await self.message.edit(view=self)

        @discord.ui.button(label='Exemplo')
        async def example_button(self, interaction: discord.Interaction, button: discord.ui.Button):
            await interaction.response.send_message('Ol√°!', ephemeral=True)

    @bot.command()
    async def timeout_example(ctx):
        """Exemplo de desativa√ß√£o de bot√µes quando o tempo esgota"""
        view = MyView()
        # Passo 1
        view.message = await ctx.send('Clique em mim!', view=view)

Comandos de aplica√ß√£o, quando voc√™ responde com :meth:`InteractionResponse.send_message`, retornam uma inst√¢ncia de :class:`InteractionCallbackResponse`, que cont√©m a mensagem enviada. Esta √© a mensagem que voc√™ deve anexar √† view.

Juntando tudo, usando a defini√ß√£o de view anterior:

.. code-block:: python3

    @tree.command()
    async def more_timeout_example(interaction):
        """Outro exemplo de desativa√ß√£o de bot√µes quando o tempo esgota"""
        view = MyView()
        callback = await interaction.response.send_message('Clique em mim!', view=view)

        # Passo 1
        resource = callback.resource
        # garantindo que √© uma mensagem de resposta √† intera√ß√£o
        if isinstance(resource, discord.InteractionMessage):
            view.message = resource


Comandos de Aplica√ß√£o
--------------------

Perguntas sobre os novos comandos de aplica√ß√£o do Discord, conhecidos como "slash commands" ou "context menu commands".

Os comandos do meu bot n√£o est√£o aparecendo!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Voc√™ fez :meth:`~.CommandTree.sync` no seu comando? Comandos precisam ser sincronizados antes de aparecer.
2. Voc√™ convidou o bot com as permiss√µes corretas? Bots precisam ser convidados com o escopo ``applications.commands`` al√©m do escopo ``bot``. Por exemplo, use a URL:
   ``https://discord.com/oauth2/authorize?client_id=<client id>&scope=applications.commands+bot``.
   Alternativamente, se usar :func:`utils.oauth_url`, voc√™ pode chamar a fun√ß√£o assim:
   ``oauth_url(<outras op√ß√µes>, scopes=("bot", "applications.commands"))``.

Como restringir um comando a uma guilda espec√≠fica?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Para restringir um comando de aplica√ß√£o a uma ou mais guildas, voc√™ deve registr√°-lo como um **comando de guilda** em vez de global. Comandos de guilda s√≥ estar√£o dispon√≠veis nas guildas especificadas.

A forma mais direta √© usar o decorador :meth:`~app_commands.guilds` no seu comando ou GroupCog.

``123456789012345678`` deve ser substitu√≠do pelo ID real da guilda que deseja restringir.

.. code-block:: python3

    @app_commands.command()  # ou @tree.command()
    @app_commands.guilds(123456789012345678)  # ou @app_commands.guilds(discord.Object(123456789012345678))
    async def ping(interaction: Interaction):
        await interaction.response.send_message("Pong!")

    # ou GroupCog (aplica-se a todos os subcomandos):

    @app_commands.guilds(123456789012345678)
    class MyGroup(commands.GroupCog):
        @app_commands.command()
        async def pong(self, interaction: Interaction):
            await interaction.response.send_message("Ping!")

Depois disso, voc√™ deve :meth:`~app_commands.CommandTree.sync` a √°rvore de comandos para cada guilda:

.. code-block:: python3

    await tree.sync(guild=discord.Object(123456789012345678))

Outros m√©todos para restringir comandos a guildas espec√≠ficas incluem:

- Usar o argumento ``guild`` ou ``guilds`` no decorador :meth:`~app_commands.CommandTree.command`:

    .. code-block:: python3

        @tree.command(guild=discord.Object(123456789012345678))
        async def ping(interaction: Interaction):
            await interaction.response.send_message("Pong!")

- Adicionar comandos com :meth:`~app_commands.CommandTree.add_command` especificando ``guild`` ou ``guilds``:

    .. code-block:: python3

        @app_commands.command()
        async def ping(interaction: Interaction):
            await interaction.response.send_message("Pong!")

        tree.add_command(ping, guild=discord.Object(123456789012345678))

    .. warning::

        N√£o combine este m√©todo com o decorador :meth:`~app_commands.CommandTree.command`,
        pois causar√° comandos duplicados.

- Usar ``guild`` ou ``guilds`` em :meth:`~ext.commands.Bot.add_cog`:

    Isso √© principalmente para :class:`~ext.commands.GroupCog`, mas tamb√©m funciona para cogs com comandos de aplica√ß√£o.
    Nota: Isso n√£o funciona com comandos h√≠bridos de aplica√ß√£o (:issue:`9366`).

    .. code-block:: python3

        class MyCog(commands.Cog):
            @app_commands.command()
            async def ping(self, interaction: Interaction):
                await interaction.response.send_message("Pong!")

        async def setup(bot: commands.Bot) -> None:
            await bot.add_cog(MyCog(...), guild=discord.Object(123456789012345678))

- Usar :meth:`~app_commands.CommandTree.copy_global_to`:

    Isso copia todos os comandos globais para uma guilda espec√≠fica. Principalmente usado para desenvolvimento.

    .. code-block:: python3

        tree.copy_global_to(guild=discord.Object(123456789012345678))